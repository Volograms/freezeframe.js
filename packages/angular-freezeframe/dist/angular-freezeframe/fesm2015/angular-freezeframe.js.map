{"version":3,"file":"angular-freezeframe.js","sources":["../../../projects/angular-freezeframe/src/lib/angular-freezeframe.component.ts","../../../projects/angular-freezeframe/src/lib/angular-freezeframe.module.ts","../../../projects/angular-freezeframe/src/public-api.ts","../../../projects/angular-freezeframe/src/angular-freezeframe.ts"],"sourcesContent":["/* eslint-disable @angular-eslint/component-selector */\nimport { Component, ElementRef, Input, Output, ViewChild, EventEmitter, AfterViewInit, OnDestroy } from '@angular/core';\nimport Freezeframe from 'freezeframe'\nimport { FreezeframeOptions, Freeze } from 'freezeframe/types'\n\nexport interface AngularFreezeframeEvent {\n  items: Freeze[],\n  isPlaying: boolean\n}\n\nconst SELECTOR = 'angular-freezeframe'\n\n@Component({\n  selector: SELECTOR,\n  template: `\n    <div class=\"${SELECTOR}\">\n      <div *ngIf=\"!slotRef.innerHTML.trim()\">\n        <img #freezeRef src=\"{{src}}\" />\n      </div>\n      <div #slotRef><ng-content></ng-content></div>\n    </div>\n  `\n})\nexport class AngularFreezeframeComponent implements AfterViewInit, OnDestroy {\n  $freezeframe!: Freezeframe\n  isPlaying = false\n\n  @Input() src?: string\n  @Input() options?: FreezeframeOptions\n  @Output() startEvent = new EventEmitter<AngularFreezeframeEvent>();\n  @Output() stopEvent = new EventEmitter<AngularFreezeframeEvent>();\n  @Output() toggleEvent = new EventEmitter<AngularFreezeframeEvent>();\n\n  @ViewChild('freezeRef') freezeRef!: ElementRef;\n  @ViewChild('slotRef') slotRef!: ElementRef;\n\n  ngAfterViewInit(): void {\n    this.init()\n  }\n\n  ngOnDestroy(): void {\n    this.destroy()\n  }\n\n  private init(): void {\n    const target = this.slotIsEmpty && this.src\n      ? this.freezeRef.nativeElement\n      : this.slotRef.nativeElement\n    this.$freezeframe = new Freezeframe(target, this.options)\n    this.initEventListeners()\n  }\n\n  private initEventListeners(): void {\n    this.$freezeframe.on('toggle', (items: Freeze[], isPlaying: boolean) => {\n      this.isPlaying = isPlaying\n      if (isPlaying) {\n        this.startEvent.emit({ items, isPlaying })\n      } else {\n        this.stopEvent.emit({ items, isPlaying })\n      }\n      this.toggleEvent.emit({ items, isPlaying })\n    });\n  }\n\n  private get slotIsEmpty(): boolean {\n    return !this.slotRef?.nativeElement?.innerHTML?.trim()\n  }\n\n  start(): void {\n    this.$freezeframe?.start()\n  }\n\n  stop(): void {\n    this.$freezeframe?.stop()\n  }\n\n  toggle(): void {\n    this.$freezeframe?.toggle()\n  }\n\n  destroy(): void {\n    this.$freezeframe?.destroy()\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFreezeframeComponent } from './angular-freezeframe.component';\n\n@NgModule({\n  declarations: [AngularFreezeframeComponent],\n  imports: [\n  ],\n  exports: [AngularFreezeframeComponent]\n})\nexport class AngularFreezeframeModule { }\n","/*\n * Public API Surface of angular-freezeframe\n */\n\nexport * from './lib/angular-freezeframe.component';\nexport * from './lib/angular-freezeframe.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}